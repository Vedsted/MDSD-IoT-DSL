devicetype csController "program.cs":
"{{IMPORTS}}
namespace CsharpController{
    class Program{
        static void Main(string[] args)        {
		{{SETUP}}
		{{PROGRAM}}
       }}}
"
external (method=NAME): 
	use: 
"Externals.{{NAME}}(value);"

socketlisten (ip=IP, port=PORT, commands=COMMANDS):
		import:
"using System;
using System.Collections.Generic;
using System.Net;
using System.Linq;
using System.Net.Sockets;
using System.Text;"

		setup:
' string ip = {{IP}};
var ipbytes = ip.Split(".").Select(oct => byte.Parse(oct)).ToArray();
IPAddress ipAddr = new IPAddress(ipbytes);
IPEndPoint localEndPoint = new IPEndPoint(ipAddr, {{PORT}});

// Creation TCP/IP Socket using  
// Socket Class Costructor 
Socket listener = new Socket(ipAddr.AddressFamily,
             SocketType.Stream, ProtocolType.Tcp);

List<Socket> input = new List<Socket> { listener };

try
{

    // Using Bind() method we associate a 
    // network address to the Server Socket 
    // All client that will connect to this  
    // Server Socket must know this network 
    // Address 
    listener.Bind(localEndPoint);

    // Using Listen() method we create  
    // the Client list that will want 
    // to connect to Server 
    listener.Listen(10);

    Console.WriteLine("Waiting connection ... ");
    while (true)
    {
        var tempinput = new List<Socket>(input);
        Socket.Select(tempinput, null, null, -1);

        foreach (var sock in tempinput)
        {
            if (sock == listener)
            {
                // Suspend while waiting for 
                // incoming connection Using  
                // Accept() method the server  
                // will accept connection of client 
                Socket clientSocket = listener.Accept();
                input.Add(clientSocket);
                Console.WriteLine("got client");
            }
            else
            {
                // Data buffer 
                byte[] bytes = new Byte[1024];

                int numByte = sock.Receive(bytes);

                var value = Encoding.UTF8.GetString(bytes, 0, numByte);

                if (!string.IsNullOrEmpty(value))
                {
                    {{COMMANDS}}
                }
            }
        }
    }
}
catch (Exception e)
{
    Console.WriteLine(e.ToString());
}'