devicetype iot "main.py": 
"{{IMPORTS}}
{{SETUP}} 

{{PROGRAM}}
"
	loop (time=TSECONDS, commands=COMMANDS):
		use:
"def th_func{{UUID}}(action):
	while True:
		time.sleep({{TSECONDS}})
		action()

def loop{{UUID}}():
	{{COMMANDS}}

_thread.start_new_thread(th_func{{UUID}}, (loop{{UUID}},))" 
	listdeclare (name=THENAMEOFTHELIST):
		setup:
"{{THENAMEOFTHELIST}} = []"
	listclear (name=NAME):
		use:
"global {{NAME}}
{{NAME}} = []" 
listaddto (name=NAME):
		use:
"{{NAME}}.append(value)"
	
	external (method=NAME, target=TARGETNAME):
		import:
"import externals"
		use:
"return externals.{{NAME}}({{TARGETNAME}})"
	arrow (left=LEFT, right=RIGHT):
		use:
"def expLeft{{UUID}}():
	{{LEFT}}
	
def expRight{{UUID}}(value):
	{{RIGHT}}

result = expLeft{{UUID}}()
expRight{{UUID}}(result)"

	wlan (ssid=SSID, password=PASSWORD):
		import:
"from network import WLAN
from machine import idle"
		setup:
"wlan = WLAN(mode=WLAN.STA)
nets = wlan.scan()
for net in nets:
	if net.ssid == '{{SSID}}':
		print('Network found!')
		wlan.connect(net.ssid, auth=(net.sec, {{PASSWORD}}))
		while not wlan.isconnected():
			idle() # save power while waiting
		print('WLAN connection succeeded!')
		print(wlan.ifconfig()) # Print the connection settings
		break"
	sensor TEMPERATURE : 
		import:
"from machine import ADC, Pin" 
		setup:
"p_out = Pin('P19', mode=Pin.OUT)
p_out.value(1)
adc = ADC()             # create an ADC object
apin = adc.channel(pin='P16', attn=2)   # create an analog pin on P16"
		use:
"temperature = apin()
return temperature"
	sensor LIGHT : 
		import:
"from LTR329ALS01 import LTR329ALS01" 
		setup:
"integration_time = LTR329ALS01.ALS_INT_50
measurement_rate = LTR329ALS01.ALS_RATE_50 
gain = LTR329ALS01.ALS_GAIN_1X 
lightsensor = LTR329ALS01(integration=integration_time, rate=measurement_rate, gain=gain)"
		use:
"luxTuple = lightsensor.light()
lux = (luxTuple[0]+luxTuple[1])/2
return lux"
 
	socketconnection (ip=IP, port=PORT, target=TARGET_DEVICE):
		import:
"import socket"
		setup:
"socket{{TARGET_DEVICE}} = socket.socket()
socket{{TARGET_DEVICE}}.setblocking(True)
socket{{TARGET_DEVICE}}.connect(('{{IP}}', {{PORT}}))"
		use:
'socket{{TARGET_DEVICE}}.send(bytes(str(value), "utf8"))'


if (condition=COND, cmds=COMMANDS, elsecmds=ELSE):
use:
"if({{COND}}):
	{{COMMANDS}}
else:
	{{ELSE}}"
	
led (hex=COLOR):
import: "import pycom"
setup: "pycom.heartbeat(False)"
use: "pycom.rgbled({{COLOR}})"

trueLiteral :
	use:
		"True"

eql (left=A, op=OP, right=B):
	use:
	"{{A}} {{OP}} {{B}}"

andop (val1=A, val2=B):
	use: "{{A}} and {{B}}"
ibool (val=VALUE): 
	use:
	"{{VALUE}}"
	
ivar (varname=VAR):
	use:"{{VAR}}"
iint (val=VALUE): 
	use:
	"{{VALUE}}"
	
gtop:
	use: ">"
	
neqlop :
	use: "!="

vardecl (name=NAME):
	use:
	 "{{NAME}} = None"
	 
variableInstantiation (name=NAME, val=VALUE):
	use: "{{NAME}} = {{VALUE}}"














