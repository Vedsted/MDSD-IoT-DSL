devicetype controller "controller.py" : 
"{{IMPORTS}} 

{{SETUP}}

{{PROGRAM}}"
	arrow (left=LEFT, right=RIGHT):
		use:
"def expLeft{{UUID}}():
	{{LEFT}}
	
def expRight{{UUID}}(value):
	{{RIGHT}}

result = expLeft{{UUID}}()
expRight{{UUID}}(result)"

	loop (time=TSECONDS, commands=COMMANDS):
		use:
"def th_func{{UUID}}(action):
	while True:
		time.sleep({{TSECONDS}})
		action()

def loop{{UUID}}():
	{{COMMANDS}}

_thread.start_new_thread(th_func{{UUID}}, (loop{{UUID}},))" 

serialread (baud=B, parity=P, bytesize=BS, bus=A, stopbits=SB,target=TGT):
import:
"import serial"
setup:
"serial{{TGT}}= serial.Serial(
					    port='{{A}}',
					    baudrate={{B}},
					    parity={{P}},
					    stopbits={{SB}},
					    bytesize={{BS}}
					)"
use:
"return serial{{TGT}}.readline()"
	external (method=NAME):
		use:
"externals.{{NAME}}(value)"
	socketlisten (ip=IPe, port=PORT, commands=COMMANDS):
	import:
"import socket
import select {{IPe}}"
		setup: 
"server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
print('Socket created')				

# Bind socket to local host and port
try:
    server.bind(({{IPe}}, {{PORT}}))
except socket.error as msg:
    print('Bind failed. Error Code : ' + msg + ' Message ' + str(msg))
    sys.exit()

server.listen(10)
input = [server, ]  # a list of all connections to check for data
# each time we call select.select()

def run_server():
    inputready, outputready, exceptready = select.select(input, [], [])
	 # check each socket that select() said has available data
    for s in inputready:  
		#if select returns our server socket, a new socket is connecting
        if s == server:          
            client, address = server.accept()
            # add it to the socket list so we can check it now
            input.append(client)
            print('new client added%s' % str(address))
        else:
            # select says that this socket has data available to recv
            data = s.recv(1024)
            if data:
                value = str(data) # read data
                value = value[2:-1] # remove b'...'
                {{COMMANDS}}
                 
def th_func_socket(action):
	while True:
		action()
_thread.start_new_thread(th_func_socket, (run_server,))"

