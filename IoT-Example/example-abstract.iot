external ext_length // Calculates the length of a list
external ext_pop	// Pop the first element of a list
external ext_isEmpty // Returns a bool indicating an empty list if true
external ext_print 	// Prints a message
external ext_avg	// Calculates the average of a list of values
external ext_str_to_float // A cast function

connectionConfig EdgeWifi {
	type:WLAN
	"ssid":"CableBox-9655-2_4Ghz"
	"password": "connectnow20"
}

abstract edge device AbstractBase {
	setup EdgeWifi
	var basevar = 0
}

abstract fog device AbstractVariables {
	var _true = true
	var _false = false
}

abstract edge device AbstractLightSensor {
	list lightLevels
	var lightLevelsLength
	var lightLevel
	var NIL
	
	/*
	 * Read light level loop
	 */
	every 1 SECONDS {
		read from LIGHTSENSOR -> to lightLevel
		ext_print of lightLevel -> to NIL
		
		read var lightLevel -> add to lightLevels
		
		// Do not exceed a list length higher than 20
		/*ext_length of lightLevels -> to lightLevelsLength
		if lightLevelsLength >= 20 {
			ext_pop of lightLevels -> to NIL
		}*/
	}
}

abstract edge device AbstractLEDActuator {
	var turnOnLED = false
	
	every 500 MILLISECONDS {
		if (turnOnLED) {
			LED ON
		} else {
			LED OFF
		}
	}
}

edge device Harvester extends AbstractLightSensor, AbstractLEDActuator, AbstractBase {
	
	var isEmpty
	
	// Allows communication to this device
	//listen on 192.168.0.21:9123 -> to turnOnLED
	
	/*
	 * Send to fog controller loop
	 */
	always {
		ext_isEmpty of lightLevels -> to isEmpty
		if isEmpty == false {
			ext_pop of lightLevels -> send to Controller
		}
	}
}

fog device Controller extends AbstractVariables {
	var lightLevel_str
	var lightLevel = 0
	var threshold = 100
	var isLEDOn = false
	var NIL
	
	listen on 192.168.0.3:8123 -> to lightLevel_str
	
	/*
	 * Thread that interacts with the actuator
	 */
	every 200 MILLISECONDS {
		ext_str_to_float of lightLevel_str -> to lightLevel
		ext_print of lightLevel_str -> to NIL
		ext_print of isLEDOn -> to NIL
		
		// Turn off LED if there is enough light and the LED is already turned on
		if lightLevel > threshold {
			//read var turnOff -> send to Harvester
			
			if isLEDOn == true {
				read var _false -> to isLEDOn
				ext_print of isLEDOn -> to NIL
				
			}
		}

		// Turn on LED if there is not enough light and the LED is off		
		if lightLevel < threshold {
			//read var turnOn -> send to Harvester
			if isLEDOn == false {
				read var _true -> to isLEDOn
				ext_print of isLEDOn -> to NIL
			}
		}
	}
}

cloud device CloudService {
	listen on 192.168.0.3:8124 -> ext_print of value
}
