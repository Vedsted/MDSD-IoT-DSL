grammar sdu.mdsd.IoT with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

generate ioT "http://www.mdsd.sdu/IoT"

Model:
	deviceTypes+=DeviceDefinition*
	system=IoTSystem;

DeviceDefinition:
	'devicetype' name=ID
	implementations+=Implementation*;

Implementation:
	WlanImpl | SocketListenImpl | SensorImpl | SocketConnectImpl | LoopImpl | ArrowImpl | ListDeclImpl | ListAddImpl |
	ListClearImpl | ExternalImpl;

SocketConnectImpl:
	'socketconnection' '(' params+=ValuedImplParam (',' params+=ValuedImplParam)*')' ':'
	body=ImplBody;
	
SensorImpl:
	'sensor'  name=ID params=ImplParams?':'
	body=ImplBody;
	
ImplBody:
	{ImplBody} 
	('import:' imports=STRING)?
	('setup:'setup=STRING)?
	('use:' use=STRING)?
	;

ImplParams:
	'(' ID (',' ID)* ')';	
	
ValuedImplParam:
	 name=ID '=' value=[Attribute|QualifiedName];	
ExternalImpl:
	'external' params=ImplParams? ':'
	body=ImplBody;

ListDeclImpl:
	'listdeclare' params=ImplParams? ':'
	body=ImplBody;

ListClearImpl:
	'listclear' params=ImplParams? ':'
	body=ImplBody;

ListAddImpl:
	'listaddto' params=ImplParams? ':'
	body=ImplBody;

ArrowImpl:
	'arrow' params=ImplParams? ':'
	body=ImplBody;

LoopImpl:
	'loop' params=ImplParams? ':'
	body=ImplBody;





SocketListenImpl:
	'socketlisten' params=ImplParams? ':'
	body=ImplBody;

WlanImpl:
	'wlan' params=ImplParams? ':'
	body=ImplBody;



IoTSystem:
	{IoTSystem}
	externalDeclarations+=ExternalDeclaration*
	configs+=Config*
	devices+=Device*;

QualifiedName: ID ('.' ID)* ;

terminal IP returns ecore::EString:
	INT '.' INT '.' INT '.' INT; // IP
terminal WINDOWS_SERIAL returns ecore::EString:
	'COM' INT;

ExternalDeclaration:
	'external' name=ID // '(' type=STRING ')' // Commented out due to not being used
;

/*
 * Configurations
 */
Config:
	ConnectionConfig | DeviceConfig;

DeviceConfig returns Config:
	{DeviceConfig} 'deviceConfig' name=ID '{'
	declarations+=Declaration*
	'}';

ConnectionConfig returns Config:
	{ConnectionConfig} 'connectionConfig' name=ID '{'
	'type' ':' type=ConfigType
	declarations+=Declaration*
	'}';

ConfigType:
	'SERIAL' | 'WLAN';

Declaration:
	key=STRING ':' value=STRING;

	/*
 * Device 
 */
Device:
	deviceType=[DeviceDefinition] 'device' name=ID '{'
	program=Program
	'}';

Program:
	{Program} topLevelCommands+= TopLevelCommand*
	
;

TopLevelCommand:
	WifiStatement | ConnectStatement |VarOrList |ListenStatement|Loop
;


ListenStatement:
	'listen' 'on' Attribute ':' port=INT '->' body=ExpressionRight;

Attribute:
	name=ID '=' (value=STRING|value=IP)
;

WifiStatement :
	'setup' connectionConfig=[ConnectionConfig];

ConnectStatement :
	'connect' 'to' device=[Device] 'on' address=Address 'using' configuration=[ConnectionConfig];

Address:
	{IpAddress} value=IP |
	{WindowsSerialAddress} value=WINDOWS_SERIAL |
	{UnixSerialAddress} value=STRING // TODO: validation
;

VarOrList:
	({Variable} 'var' name=ID ('=' value=Expression)? | {PyList} 'list' name=ID);

Loop:
	{Loop}
	('always' | 'every' timeVal=Expression timeUnit=TIMEUNIT) '{'
	command+=Command*
	'}';

TIMEUNIT:
	{MILLISECONDS} 'MILLISECONDS' |
	{SECONDS} 'SECONDS' |
	{MINUTES} 'MINUTES' |
	{HOURS} 'HOURS' |
	{DAYS} 'DAYS' |
	{WEEKS} 'WEEKS';

Command:
	Action | ArrowCommand | IfStatement;

Action returns Command:
	ClearListAction |
	LEDAction;

ClearListAction returns Action:
	{ClearListAction} 'clear' list=[PyList];

LEDAction returns Action:
	{LEDAction} 'LED' state=('ON' | 'OFF');

ArrowCommand returns Command:
	{ArrowCommand} left=ExpressionLeft '->' right=ExpressionRight;

ExpressionLeft returns Command:
	ExternalOf | ReadSensor | ReadConnection | ReadVariable | Expression;

Expression:
	BoolExpression | IntExpression | {VarAccess} variableName=[VarOrList];

BoolExpression:
	value=Bool;

IntExpression:
	value=INT;

ReadVariable:
	'read' 'var' value=[Variable];

ReadConnection:
	'read' 'from' source=[Device];

ExternalOf:
	method=[ExternalDeclaration] 'of' target=[VarOrList];

ReadSensor:
	'read' 'sensor' sensor=[SensorImpl|QualifiedName];

ExpressionRight returns Command:
	SendCommand | AddToList | ToVar | ExternalRight | Block;

Block:
	'{' commands+=Command+ '}';

ToVar returns ExpressionRight:
	{ToVar} 'to' variable=[Variable];

AddToList returns ExpressionRight:
	{AddToList} 'add' 'to' list=[PyList];

ExternalRight:
	method=[ExternalDeclaration] 'of' 'value';

SendCommand returns ExpressionRight:
	{SendCommand} 'send' 'to' target=[Device];

IfStatement returns Command:
	{IfStatement} 'if' condition=Comparison '{' commands+=Command+ '}' (elseBlock=ElseBlock)?;

ElseBlock:
	{ElseBlock} 'else' '{' commands+=Command+ '}';

Comparison returns Comparison:
	OR;

OR returns Comparison:
	AND ({OR.left=current} ('||' | 'OR') right=AND)*;

AND returns Comparison:
	EQL ({AND.left=current} ('&&' | 'AND') right=EQL)*;

EQL returns Comparison:
	Item ({EQL.left=current} op=ComparisonOp right=Item)?;

Item returns Comparison:
	Parenthasis |
	{ItemVariable} value=[Variable] |
	{ItemInt} value=INT |
	{ItemBool} value=Bool;

Parenthasis returns Comparison:
	'(' Comparison ')';

ComparisonOp:
	{GT} op='>' |
	{LT} op='<' |
	{LE} op='<=' |
	{GE} op='>=' |
	{EQ} op='==' |
	{NE} op='!=';

Bool:
	{True} ('TRUE' | 'true') | {False} ('FALSE' | 'false');

