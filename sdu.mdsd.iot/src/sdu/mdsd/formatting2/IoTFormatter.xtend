/*
 * generated by Xtext 2.20.0
 */
package sdu.mdsd.formatting2

import com.google.inject.Inject
import org.eclipse.xtext.formatting2.AbstractFormatter2
import org.eclipse.xtext.formatting2.IFormattableDocument
import sdu.mdsd.ioT.DeviceConfig
import sdu.mdsd.ioT.Model
import sdu.mdsd.services.IoTGrammarAccess

class IoTFormatter extends AbstractFormatter2 {
	
	@Inject extension IoTGrammarAccess

	def dispatch void format(Model model, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (externalDeclaration : model.externalDeclarations) {
			externalDeclaration.format
		}
		for (config : model.configs) {
			config.format
		}
		for (device : model.devices) {
			device.format
			
			device.program.variables.forEach[append[newLine]]
			
			var open = device.regionFor.keyword('{')
			var close = device.regionFor.keyword('}')
			open.append[newLine]
			interior(open, close)[indent]
		}
	}

	def dispatch void format(DeviceConfig deviceConfig, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (declaration : deviceConfig.declarations) {
			declaration.format
		}
	}
	
	// TODO: implement for ConnectionConfig, AbstractDevice, ControllerDevice, IoTDevice, Program, ListenStatement, ConnectStatement, Variable, Loop, ArrowCommand, BoolExpression, ReadSensor, Block, IfStatement, ElseBlock, OR, AND, EQL, ItemBool
}
