/*
 * generated by Xtext 2.20.0
 */
package sdu.mdsd.generator

import java.util.ArrayList
import java.util.HashMap
import java.util.List
import java.util.Map
import java.util.UUID
import java.util.stream.Collectors
import org.eclipse.emf.common.util.EList
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import sdu.mdsd.ioT.*

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class IoTGenerator extends AbstractGenerator {

	Device currentDevice;


	List<String> usedSetups;
	List<String> usedImports;

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		// var model = resource.allContents.filter(Model).toList
		for (dev : resource.allContents.filter(Device).toList) {
			fsa.generateFile('''«dev.name»/«dev.deviceType.fileName»''', dev.convertDevice)
		}
	}

	def convertDevice(Device device) {
		currentDevice = device
		usedSetups = new ArrayList<String>()
		var importString = buildImports(device)
		var programString = buildProgram(device)

		var string =  device.deviceType.body;
		string = string.cleverReplace("{{IMPORTS}}", importString)
		string = string.cleverReplace("{{SETUP}}", buildSetups())
		string = string.cleverReplace("{{PROGRAM}}", programString)
		return string
	}

	def buildImports(Device device) {
		// TODO ideally only import things used in the program, but you know
		var imports = device.deviceType.templates.filter[body.imports !== null].map[body.imports].toList
		var strings = new ArrayList<String>();
		for (import : imports) {
			// Split on new line to get each import as a separate line.
			// So we can check for duplicates
			strings.addAll(import.split("\n"))
		}
		// Return distinct list to string
		return strings.stream.distinct.collect(Collectors.toList()).join("\n")
	}

	def buildSetups() {
		var sb = new StringBuilder();
		for (setup : usedSetups.stream.distinct().collect(Collectors.toList)) {
			sb.append(setup);
			sb.append("\n")
		}
		return sb.toString()
	}

	def buildProgram(Device device) {
		var sb = new StringBuilder()
		var program = device.program
		for (cmd : program.expressions) {
			sb.append(cmd.generateCode)
			sb.append("\n")
		}
		return sb.toString()
	}

	var loopCount = 0;

	def String generateCode(Expression command) {
		switch(command){
			Number: return command.value.toString()
			StringValue: return command.value
			Command:{
				var impl = command.template
				var paramsMap = new HashMap<String,String>();
				for(arg : command.args){
					if(!arg.param.isArray)
						paramsMap.put(arg.param.name, arg.value.generateCode)
					else
						paramsMap.put(arg.param.name, arg.values.map[generateCode].join('\n'))
				}
				var setUpCode = impl.body.setup.insertParameters(paramsMap)
				usedSetups.add(setUpCode);
				
				return impl.body.use.insertParameters( paramsMap);
			}
		}
	}


	def insertParameters(String setup, Map<String, String> paramsMap) {

		var codeString = setup
		if (codeString === null) {
			return ""
			//throw new Exception("Why is the code string null")
		}

		var paramList = paramsMap.keySet.toList
		for (param : paramList) {
			var newValue = paramsMap.get(param);
			if (newValue === null) {
				throw new Exception('''«param» was null''')
			}
			codeString = codeString.cleverReplace('''{{«param»}}''', newValue)
		}
		codeString = codeString.cleverReplace('''{{UUID}}''', UUID.randomUUID.toString.replace('-', '_'))
		
		return codeString;
	}

	/**
	 * replaces one string with another string and attempts to make nice indentation
	 */
	def cleverReplace(String codeString, String param, String newValue) {
		var codeStringLines = codeString.split("\n")
		var newLines = newValue.split("\n")
		for (var i = 0; i < codeStringLines.length; i++) {
			var line = codeStringLines.get(i);
			if (line.contains(param)) {
				var indentChars = line.toCharArray().takeWhile[c|c == ' ' || c == '\t']
				var resultsb = new StringBuilder()
				for (nline : newLines) {
					resultsb.append(new String(indentChars));
					resultsb.append(line.replace(param, nline))
					resultsb.append('\n')
				}

				codeStringLines.set(i, resultsb.toString())
			}
		}
		return codeStringLines.join('\n')
	}

	
}
