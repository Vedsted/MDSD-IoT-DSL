/*
 * generated by Xtext 2.20.0
 */
package sdu.mdsd.validation

import sdu.mdsd.ioT.Device
import org.eclipse.xtext.validation.Check
import sdu.mdsd.ioT.IoTPackage
import java.util.ArrayList
import java.util.List

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class IoTValidator extends AbstractIoTValidator {
	
//	public static val INVALID_NAME = 'invalidName'
//
//	@Check
//	def checkGreetingStartsWithCapital(Greeting greeting) {
//		if (!Character.isUpperCase(greeting.name.charAt(0))) {
//			warning('Name should start with a capital', 
//					IoTPackage.Literals.GREETING__NAME,
//					INVALID_NAME)
//		}
//	}
	
	public static val CYCLICDECLARATION = 'cyclicDeclaration'
	
	@Check
	def checkCyclicInheritance(Device device) {
		var ArrayList<Device> parents = newArrayList
				
		if (device.hasCyclicDeclaration(parents)) {
			error(
				"Cyclic declaration found in device: '" + device.name + "'", 
				IoTPackage.Literals.DEVICE__EXTENDING, 
				CYCLICDECLARATION
			)
		}
	}
		
	private def boolean hasCyclicDeclaration(Device device, List<Device> l) {		
		// device already found
		if (l.contains(device)) 
			return true
		
		// Check if name is seen before
		if (l.filter[e | e.name == device.name].length > 0)
			return true
		
		// Add device to seen and run for extending
		for (e : device.extending) {
			l.add(device)
			if (e.hasCyclicDeclaration(l))
				return true	
		}
		
		l.add(device)
		return false
	}
		
}
