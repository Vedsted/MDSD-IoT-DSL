/*
 * generated by Xtext 2.20.0
 */
package sdu.mdsd.validation

import sdu.mdsd.ioT.*;
import org.eclipse.emf.common.util.EList
import org.eclipse.xtext.validation.Check
import java.util.regex.Pattern
import java.util.regex.Matcher
import sdu.mdsd.ioT.IoTPackage
import org.eclipse.emf.ecore.EReference
import org.eclipse.emf.ecore.EStructuralFeature

/**
 * This class contains custom validation rules. 
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class IoTValidator extends AbstractIoTValidator {

	public static val INVALID_NAME = 'invalidName'

	@Check
	def checkTemplateCodeStringParamNamesExist(TmplBody template) {
		checkCode(template.imports, template, IoTPackage.eINSTANCE.tmplBody_Imports)
		checkCode(template.setup, template, IoTPackage.eINSTANCE.tmplBody_Setup)
		checkCode(template.use, template,  IoTPackage.eINSTANCE.tmplBody_Use)
	}
	
	def checkCode(String code, TmplBody template, EStructuralFeature atts){
		if(code === null)
			return;
		var parentObject = template.eContainer
		var params = (parentObject as Template)?.params?.params
		if (params !== null) {
			val pattern = "\\{\\{\\w*\\}\\}";
			var regex = Pattern.compile(pattern);
			var match = regex.matcher(code);
			while (match.find()) {
				val parameter = code.substring(match.start() + 2, match.end() - 2)
				if (params.filter[item|item.name.equals(parameter)].isEmpty) {
					error('''Parameter «parameter» not declared''', atts)
				}
			}
		}
	}

	@Check
	def checkTemplateParamsValid(TmplParam par) {
		var tmpl = par.eContainer.eContainer as Template
		val atts = IoTPackage.eINSTANCE.tmplParam_Meaning;
		switch (tmpl) {
			WlanTmpl:
				if(par.meaning != "ssid" && par.meaning != "password") error('''Parameter «par.meaning» is not valid''',
					atts)
			SocketListenTmpl:
				if(par.meaning != "ip" && par.meaning != "port" &&
					par.meaning != "commands") error('''Parameter «par.meaning» is not valid''', atts)
			SensorTmpl:
				error('''Parameter «par.meaning» is not valid''', atts)
			SocketConnectTmpl:
				if(par.meaning != "ip" && par.meaning != "port" &&
					par.meaning != "target") error('''Parameter «par.meaning» is not valid''', atts)
			LoopTmpl:
				if(par.meaning != "time" && par.meaning != "commands") error('''Parameter «par.meaning» is not valid''',
					atts)
			ArrowTmpl:
				if(par.meaning != "left" && par.meaning != "right") error('''Parameter «par.meaning» is not valid''',
					atts)
			ListDeclTmpl:
				if(par.meaning != "name") error('''Parameter «par.meaning» is not valid''', atts)
			ListAddTmpl:
				if(par.meaning != "name") error('''Parameter «par.meaning» is not valid''', atts)
			ListClearTmpl:
				if(par.meaning != "name") error('''Parameter «par.meaning» is not valid''', atts)
			ExternalTmpl:
				if(par.meaning != "method" && par.meaning != "target") error('''Parameter «par.meaning» is not valid''',
					atts)
		}
	}

}
