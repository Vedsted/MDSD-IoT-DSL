/*
 * generated by Xtext 2.20.0
 */
package sdu.mdsd.validation

import sdu.mdsd.ioT.*;
import org.eclipse.emf.common.util.EList
import org.eclipse.xtext.validation.Check
import java.util.regex.Pattern
import java.util.regex.Matcher
import sdu.mdsd.ioT.IoTPackage

/**
 * This class contains custom validation rules. 
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class IoTValidator extends AbstractIoTValidator {

	public static val INVALID_NAME = 'invalidName'

	@Check
	def checkTemplateCodeStringParamNamesExist(TmplBody template) {
		var code = template.imports
		var parentObject = template.eContainer
		var params = (parentObject as Template)?.params?.params
		if (params !== null) {
			val pattern = "\\{\\{\\w*\\}\\}";
			var regex = Pattern.compile(pattern);
			var match = regex.matcher(code);
			while (match.find()) {
				val parameter = code.substring(match.start() + 2, match.end() - 2)
				if (params.filter[item|item.name.equals(parameter)].isEmpty) {
					val atts = IoTPackage.eINSTANCE.tmplBody_Imports;
					error('''Parameter «parameter» not declared''', atts)
				}
			}
		}
	}

}
